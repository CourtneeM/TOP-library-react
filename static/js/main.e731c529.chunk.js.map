{"version":3,"sources":["components/Book.js","components/NewBookForm.js","components/Bookshelf.js","App.js","serviceWorker.js","index.js"],"names":["Book","state","editMode","deleteBook","e","index","Array","from","target","parentNode","children","indexOf","props","toggleCompleted","toggleEditMode","setState","editBook","title","document","getElementById","value","author","pages","book","completed","querySelector","checked","toggleOrder","upIndex","downIndex","classList","contains","length","this","className","onClick","id","type","placeholder","onChange","Component","NewBookForm","handleAddBookBtn","addBook","Bookshelf","bookshelf","push","splice","newIndex","map","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e731c529.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport '../style/Book.css';\r\n\r\nclass Book extends Component {\r\n  \r\n  state = {\r\n    editMode: false\r\n  }\r\n\r\n  deleteBook = (e) => {\r\n    let index = Array.from(e.target.parentNode.parentNode.parentNode.children).indexOf(e.target.parentNode.parentNode);\r\n    this.props.deleteBook(index);\r\n  }\r\n\r\n  toggleCompleted = (e) => {\r\n    let index = Array.from(e.target.parentNode.parentNode.parentNode.children).indexOf(e.target.parentNode.parentNode);\r\n    this.props.toggleCompleted(index);\r\n  }\r\n\r\n  toggleEditMode = () => {\r\n    let editMode = this.state.editMode;\r\n    this.setState({\r\n      editMode: !editMode\r\n    });\r\n  }\r\n\r\n  editBook = (e) => {\r\n    let index = Array.from(e.target.parentNode.parentNode.parentNode.children).indexOf(e.target.parentNode.parentNode);\r\n    let title = document.getElementById('edit-title').value;\r\n    let author = document.getElementById('edit-author').value;\r\n    let pages = document.getElementById('edit-pages').value;\r\n\r\n    if (title === \"\" || author === \"\" || pages === \"\") {\r\n      return;\r\n    }\r\n\r\n    let book = {\r\n      title,\r\n      author, \r\n      pages,\r\n      completed: document.querySelector('input[type=\"checkbox\"]').checked\r\n    }\r\n    this.setState({\r\n      editMode: false\r\n    });\r\n    this.props.editBook(book, index);\r\n  }\r\n\r\n  toggleOrder = (e) => {\r\n    let index = Array.from(e.target.parentNode.parentNode.parentNode.parentNode.children).indexOf(e.target.parentNode.parentNode.parentNode);\r\n    let upIndex = index;\r\n    let downIndex = index;\r\n    \r\n    if (e.target.classList.contains('fa-sort-up')) {\r\n      if (upIndex === 0) {\r\n        return;\r\n      }\r\n      upIndex--;\r\n      this.props.toggleOrder(index, upIndex);\r\n    } else if (e.target.classList.contains('fa-sort-down')) {\r\n      if (downIndex === ((Array.from(e.target.parentNode.parentNode.parentNode.parentNode.children)).length - 1)) {\r\n        return;\r\n      }\r\n      downIndex++;\r\n      this.props.toggleOrder(index, downIndex);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {title, author, pages, completed} = this.props.book;\r\n    return (\r\n      <div>\r\n        <div className='book'>\r\n          <div className=\"order-btns\">\r\n           { this.state.editMode ? null : <i onClick={ this.toggleOrder } className=\"fas fa-sort-up fa-2x\"></i> }\r\n           { this.state.editMode ? null : <i onClick={ this.toggleOrder } className=\"fas fa-sort-down fa-2x\"></i> }\r\n          </div>\r\n          { this.state.editMode ? <input id=\"edit-title\" type=\"text\" placeholder={ title } /> : <p onClick={ this.toggleEditMode }>{ title }</p> }\r\n          { this.state.editMode ? <input id=\"edit-author\" type=\"text\" placeholder={ author } /> : <p onClick={ this.toggleEditMode }>{ author }</p> }\r\n          { this.state.editMode ? <input id=\"edit-pages\" type=\"text\" placeholder={ pages } /> : <p onClick={ this.toggleEditMode }>{ pages }</p> }\r\n          { <input type=\"checkbox\" checked={completed} onChange={ this.toggleCompleted } /> }\r\n          { this.state.editMode ? <button onClick={ this.editBook }>Save Changes</button> : <p id=\"delete-btn\" onClick={ this.deleteBook }>[X]</p> }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Book;","import React, {Component} from 'react';\r\nimport '../style/NewBookForm.css';\r\n\r\nclass NewBookForm extends Component {\r\n\r\n  handleAddBookBtn = () => {\r\n    let title = document.getElementById('new-book-title');\r\n    let author = document.getElementById('new-book-author');\r\n    let pages = document.getElementById('new-book-pages');\r\n    let completed = document.getElementById('new-book-completed');\r\n    \r\n    if (title.value === \"\" || author.value === \"\" || pages.value === \"\" ) {\r\n      return;\r\n    }\r\n\r\n    let book = {\r\n      title: title.value,\r\n      author: author.value,\r\n      pages: pages.value,\r\n      completed: completed.checked\r\n    }\r\n\r\n    title.value = \"\";\r\n    author.value = \"\";\r\n    pages.value = \"\";\r\n    completed.checked = false;\r\n\r\n    this.props.addBook(book);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"new-book-form\">\r\n        <div>\r\n          <input id=\"new-book-title\" type=\"text\" placeholder=\"New Book Title\" />\r\n          <input id=\"new-book-author\" type=\"text\" placeholder=\"New Book Author\" />\r\n          <input id=\"new-book-pages\" type=\"number\" placeholder=\"New Book Pages\" />\r\n          <label>Completed</label>\r\n          <input id=\"new-book-completed\" type=\"checkbox\" />\r\n          <p></p>\r\n        </div>\r\n        <button onClick={ this.handleAddBookBtn }>Add Book</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NewBookForm;","import React, { Component } from 'react';\r\nimport Book from './Book';\r\nimport NewBookForm from './NewBookForm';\r\nimport '../style/Bookshelf.css';\r\n\r\nclass Bookshelf extends Component {\r\n\r\n  state = {\r\n    bookshelf: []\r\n  }\r\n\r\n  addBook = (book) => {\r\n    let bookshelf = this.state.bookshelf;\r\n    bookshelf.push(book);\r\n    this.setState({\r\n      bookshelf\r\n    });\r\n  }\r\n\r\n  deleteBook = (index) => {\r\n    let bookshelf = this.state.bookshelf;\r\n    bookshelf.splice(index, 1);\r\n    this.setState({\r\n      bookshelf\r\n    });\r\n  }\r\n\r\n  toggleCompleted = (index) => {\r\n    let bookshelf = this.state.bookshelf;\r\n    bookshelf[index].completed = !bookshelf[index].completed;\r\n    this.setState({\r\n      bookshelf\r\n    });\r\n  }\r\n\r\n  editBook = (book, index) => {\r\n    let bookshelf = this.state.bookshelf;\r\n    bookshelf[index] = book;\r\n    this.setState({\r\n      bookshelf\r\n    });\r\n  }\r\n\r\n  toggleOrder = (index, newIndex) => {\r\n    let bookshelf = this.state.bookshelf;\r\n    let book = bookshelf[index];\r\n    bookshelf.splice(index, 1);\r\n    bookshelf.splice(newIndex, 0, book);\r\n    this.setState({\r\n      bookshelf\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className='bookshelf'>\r\n          <p>Title</p>\r\n          <p>Author</p>\r\n          <p>Pages</p>\r\n          <p>Completed</p>\r\n          <p>Delete</p>\r\n        </div>\r\n        <div className=\"books\">\r\n          { this.state.bookshelf.map((book, index) => <Book book={book} index={index} deleteBook={this.deleteBook} toggleCompleted={this.toggleCompleted} editBook={this.editBook} toggleOrder={this.toggleOrder}/> ) }\r\n        </div>\r\n        <div>\r\n          <NewBookForm addBook={ this.addBook } />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Bookshelf;","import React, { Component } from 'react';\nimport Bookshelf from './components/Bookshelf';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Bookshelf />\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}